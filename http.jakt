import sockets { createConnection, write, readString, close_socket }
import json { parse_json, JsonValue }
// FIXME: use enums for representing http methods (is it possible yet?)
struct HTTPResponse {
    statusCode: u32
    text: String
    headers: [String: String]
}

// TODO: allow switching off redirect following
class HTTP {
    public function get(url: String, headers: [String : String]?, body: String?) throws -> HTTPResponse {
        let text = HTTP::buildRequestText("GET", host: url, path: "/api/v10/gateway", headers, body)
        return HTTP::sendSimpleRequest(hostname: url, port: 80, data: text)
    }

    public function post(url: String, headers: [String : String]?, body: String?) throws -> HTTPResponse {
        let text = HTTP::buildRequestText("POST", host: url, path: "/", headers, body)
        return HTTP::sendSimpleRequest(hostname: url, port: 80, data: text)
    }

    public function put(url: String, headers: [String : String]?, body: String) throws -> HTTPResponse {
        let text = HTTP::buildRequestText("PUT", host: url, path: "/", headers, body)
        return HTTP::sendSimpleRequest(hostname: url, port: 80, data: text)
    }

    // TODO: allow switching http version (requires a multiplexing implementation (dead inside noises))
    // TODO: after traits are implemented, consider adding a common method for stringifying primitive types such as i64 so we can just pass it as the body
    public function buildRequestText(anon method: String, host: String, path: String, headers: [String: String]?, body: String?) throws -> String {
        mut str = StringBuilder::create()
        str.append_string(format("Host: {}\r\n", host))
        if headers.has_value() {
            for header in headers!.iterator() {
                str.append_string(format("{}: {}\r\n", header.0, header.1))
            }
        }
        return format("{} {} HTTP/1.1\r\n{}\r\n{}", method, path, str.to_string(), (body ?? ""))
    }

    function parseResponse(anon resp: String) throws -> HTTPResponse {
        mut statusCode: u32 = 0
        mut dict = Dictionary<String, String>()
        mut contentTime = false
        mut builder = StringBuilder::create()
        mut i = 0;

        // this can be EXTREMELY optimized once we get some new builtin funcs
        // FIXME: this probably has horrible performance.
        // the contentTime thing is the main issue: it copies already allocated data to the builder to finally merge em all together
        // i think getting a subslice of the array (starting at i+1, ending at length-1) and just joining it would be better 
        // FIXME: this also looks HORRIBLE but we do have bigger fish to fry
        for lineR in resp.split('\n').iterator() {
            let line = lineR.replace(replace: "\r", with: "")
            if contentTime {
                if (line != "") { builder.append_string(line) }
                continue
            }

            if i == 0 {
                statusCode = line.split(' ')[1].to_uint()!
                i++
                continue
            }

            if line == "" {
                println("switching mode")
                contentTime = true
                continue
            }

            // parse header
            if contentTime == false  {
                let key = line.split(':')[0]
                dict.set(key, line.replace(replace: (key + ": "), with: ""))
            }
            i++
        }

        if statusCode == 0 {
            throw Error::from_errno(0xbeef)
        }
        return HTTPResponse(statusCode: statusCode, text: builder.to_string(), headers: dict)
    }

    function sendSimpleRequest(hostname: String, port: u32, data: String) throws -> HTTPResponse {
        let sock = createConnection(hostname, port)
        write(socket: sock, data)
        let str = readString(socket: sock)
        let resp = HTTP::parseResponse(str)
        if resp.statusCode >= 300 or resp.statusCode < 400 {
            let newUrl = HTTP::handleRedirect(resp)
            if newUrl.has_value() {
                close_socket(descriptor: sock)
                // FIXME: parse url and follow it
            }
        }
        close_socket(descriptor: sock)
        return resp
    }

    // FIXME: "A client SHOULD detect and intervene in cyclical redirections (i.e., "infinite" redirection loops)." - HTTP 1.1 spec
    // FIXME: implement other types of redirects other than just cloudflare's
    function handleRedirect(anon response: HTTPResponse) throws -> String? {
        if response.headers.contains("Report-To") {
            return ""
        }
        return None 
    }
}

// FIXME: hacky (and unsafe) way of passing functions as arguments!
// extern struct Function {}

class WebSocket {
    // TODO: make this private when we get private
    _sock: i64
    _wsKey: String
    _connectionPayload: String

    // FIXME: rewrite the signature to use parseUrl
    public function create(host: String, path: String) throws -> WebSocket {
        let text = HTTP::buildRequestText(
            "GET",
            host,
            path,
            headers: [
                "Upgrade": "websocket",
                "Connection": "Upgrade",
                "Sec-WebSocket-Key": "x3JJHMbDL1EzLkh9GBhXDw==",
                "Sec-WebSocket-Version": "13"
            ],
            body: None
        )
        return WebSocket(_sock: -1, _wsKey: "cu", _connectionPayload: text)
    }

    // public function onData(mut this, anon handler: Function) {
    //    this.handler = handler
    // }

    public function connect(mut this) throws {
        //let sock = createConnection(hostname: host, 80)
    }
}